{
  "address": "0x41f3865cd5479B346089beACbcCC8416E1F61a05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dedicatedMsgSender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "requestTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfilledTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fulfilledBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "randomness",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SimpleVRFContract.Request",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "RandomnessFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "requestId",
          "type": "uint64"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RequestedRandomness",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "dataWithRound",
          "type": "bytes"
        }
      ],
      "name": "fulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRandomness",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "requestRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilledTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fulfilledBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3b2a023777e8540cc813773b199862c3e6adc35b48aeccb29165f8aaf929a83",
  "receipt": {
    "to": null,
    "from": "0x23e359eCAB56210f4b8B559218C4d27A85b052b8",
    "contractAddress": "0x41f3865cd5479B346089beACbcCC8416E1F61a05",
    "transactionIndex": 1,
    "gasUsed": "1064048",
    "logsBloom": "0x
    "blockHash": "0x35e707da6f57e3e156ba27d9a8c8e2947ed425bacc6efb76c0027bf65fdf1a55",
    "transactionHash": "0xf3b2a023777e8540cc813773b199862c3e6adc35b48aeccb29165f8aaf929a83",
    "logs": [],
    "blockNumber": 10353,
    "cumulativeGasUsed": "1064048",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa55e7F0dD850C5353025d3cFA5a36e648635a256"
  ],
  "numDeployments": 1,
  "solcInputHash": "714411337133d094297e8a851deec02a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dedicatedMsgSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SimpleVRFContract.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"requestId\",\"type\":\"uint64\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dataWithRound\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRandomness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fulfilledBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RequestedRandomness(uint256,bytes)\":{\"params\":{\"data\":\"Additional data associated with the request.\"}}},\"kind\":\"dev\",\"methods\":{\"fulfillRandomness(uint256,bytes)\":{\"params\":{\"dataWithRound\":\"Additional data provided by Gelato VRF containing request details.\",\"randomness\":\"The random number generated by Gelato VRF.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RequestedRandomness(uint256,bytes)\":{\"notice\":\"Event emitted when a randomness request is made.\"}},\"kind\":\"user\",\"methods\":{\"fulfillRandomness(uint256,bytes)\":{\"notice\":\"Callback function used by Gelato VRF to return the random number. The randomness is derived by hashing the provided randomness with the request ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gelato-vrf/SimpleVRFContract.sol\":\"SimpleVRFContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/gelato-vrf/GelatoVRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IGelatoVRFConsumer} from \\\"./IGelatoVRFConsumer.sol\\\";\\r\\n\\r\\n/// @title GelatoVRFConsumerBase\\r\\n/// @dev This contract can be inherit by upgradeable smart contracts as well.\\r\\n/// @dev This contract handles domain separation between consecutive randomness requests\\r\\n/// The contract has to be implemented by contracts willing to use the gelato VRF system.\\r\\n/// This base contract enhances the GelatoVRFConsumer by introducing request IDs and\\r\\n/// ensuring unique random values.\\r\\n/// for different request IDs by hashing them with the random number provided by drand.\\r\\n/// For security considerations, refer to the Gelato documentation.\\r\\nabstract contract GelatoVRFConsumerBase is IGelatoVRFConsumer {\\r\\n    uint256 private constant _PERIOD = 3;\\r\\n    uint256 private constant _GENESIS = 1692803367;\\r\\n    bool[] public requestPending;\\r\\n    mapping(uint256 => bytes32) public requestedHash;\\r\\n\\r\\n    /// @notice Returns the address of the dedicated msg.sender.\\r\\n    /// @dev The operator can be found on the Gelato dashboard after a VRF is deployed.\\r\\n    /// @return Address of the operator.\\r\\n    function _operator() internal view virtual returns (address);\\r\\n\\r\\n    /// @notice User logic to handle the random value received.\\r\\n    /// @param randomness The random number generated by Gelato VRF.\\r\\n    /// @param requestId The ID for the randomness request.\\r\\n    /// @param extraData Additional data from the randomness request.\\r\\n    function _fulfillRandomness(\\r\\n        uint256 randomness,\\r\\n        uint256 requestId,\\r\\n        bytes memory extraData\\r\\n    ) internal virtual;\\r\\n\\r\\n    /// @notice Requests randomness from the Gelato VRF.\\r\\n    /// @dev The extraData parameter allows for additional data to be passed to\\r\\n    /// the VRF, which is then forwarded to the callback. This is useful for\\r\\n    /// request tracking purposes if requestId is not enough.\\r\\n    /// @param extraData Additional data for the randomness request.\\r\\n    /// @return requestId The ID for the randomness request.\\r\\n    function _requestRandomness(\\r\\n        bytes memory extraData\\r\\n    ) internal returns (uint256 requestId) {\\r\\n        requestId = uint256(requestPending.length);\\r\\n        requestPending.push();\\r\\n        requestPending[requestId] = true;\\r\\n\\r\\n        bytes memory data = abi.encode(requestId, extraData);\\r\\n        uint256 round = _round();\\r\\n\\r\\n        bytes memory dataWithRound = abi.encode(round, data);\\r\\n        bytes32 requestHash = keccak256(dataWithRound);\\r\\n\\r\\n        requestedHash[requestId] = requestHash;\\r\\n\\r\\n        emit RequestedRandomness(round, data);\\r\\n    }\\r\\n\\r\\n    /// @notice Callback function used by Gelato VRF to return the random number.\\r\\n    /// The randomness is derived by hashing the provided randomness with the request ID.\\r\\n    /// @param randomness The random number generated by Gelato VRF.\\r\\n    /// @param dataWithRound Additional data provided by Gelato VRF containing request details.\\r\\n    function fulfillRandomness(\\r\\n        uint256 randomness,\\r\\n        bytes calldata dataWithRound\\r\\n    ) external {\\r\\n        require(msg.sender == _operator(), \\\"only operator\\\");\\r\\n\\r\\n        (, bytes memory data) = abi.decode(dataWithRound, (uint256, bytes));\\r\\n        (uint256 requestId, bytes memory extraData) = abi.decode(\\r\\n            data,\\r\\n            (uint256, bytes)\\r\\n        );\\r\\n\\r\\n        bytes32 requestHash = keccak256(dataWithRound);\\r\\n        bool isValidRequestHash = requestHash == requestedHash[requestId];\\r\\n\\r\\n        require(requestPending[requestId], \\\"request fulfilled or missing\\\");\\r\\n\\r\\n        if (isValidRequestHash) {\\r\\n            randomness = uint(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        randomness,\\r\\n                        address(this),\\r\\n                        block.chainid,\\r\\n                        requestId\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n\\r\\n            _fulfillRandomness(randomness, requestId, extraData);\\r\\n            requestPending[requestId] = false;\\r\\n\\r\\n            delete requestedHash[requestId];\\r\\n        }\\r\\n\\r\\n        delete requestedHash[requestId];\\r\\n    }\\r\\n\\r\\n    /// @notice Computes and returns the round number of drand to request randomness from.\\r\\n    function _round() private view returns (uint256 round) {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        uint256 elapsedFromGenesis = block.timestamp - _GENESIS;\\r\\n        uint256 currentRound = (elapsedFromGenesis / _PERIOD) + 1;\\r\\n\\r\\n        round = block.chainid == 1 ? currentRound + 4 : currentRound + 1;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8cc7e4079fd375b6137069d7a895e7252c87620cecef9f11b0d6a900d618ed04\",\"license\":\"MIT\"},\"contracts/gelato-vrf/IGelatoVRFConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title IGelatoVRFConsumer\\r\\n/// @dev Interface for consuming random number provided by Drand.\\r\\n/// @notice This interface allows contracts to receive a random number provided by Gelato VRF.\\r\\ninterface IGelatoVRFConsumer {\\r\\n    /// @notice Event emitted when a randomness request is made.\\r\\n    /// @param data The round of randomness to request.\\r\\n    /// @param data Additional data associated with the request.\\r\\n    event RequestedRandomness(uint256 round, bytes data);\\r\\n\\r\\n    /// @notice Callback function used by Gelato to return the random number.\\r\\n    /// @dev The random number is fetched from one among many drand endpoints\\r\\n    /// and passed back to this function like in a Gelato Web3 Function.\\r\\n    /// @param randomness The random number generated by drand.\\r\\n    /// @param data Additional data provided by Gelato VRF or the user, typically unused.\\r\\n    function fulfillRandomness(\\r\\n        uint256 randomness,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x35c07c338658f627538081bd5d12cd046303108eab8866dde2d4a2161ae8daed\",\"license\":\"MIT\"},\"contracts/gelato-vrf/SimpleVRFContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport {GelatoVRFConsumerBase} from \\\"./GelatoVRFConsumerBase.sol\\\";\\r\\n\\r\\ncontract SimpleVRFContract is GelatoVRFConsumerBase {\\r\\n    address private immutable _operatorAddr; //\\r\\n    bytes32 public latestRandomness;\\r\\n    uint64 public lastRequestId;\\r\\n\\r\\n    struct Request {\\r\\n        uint256 requestTime;\\r\\n        uint256 requestBlock;\\r\\n        uint256 fulfilledTime;\\r\\n        uint256 fulfilledBlock;\\r\\n        uint256 randomness;\\r\\n    }\\r\\n\\r\\n    event RandomnessRequested(uint64 requestId);\\r\\n    event RandomnessFulfilled(uint256 indexed nonce, Request);\\r\\n\\r\\n    mapping(uint256 => Request) public requests;\\r\\n    uint256 public nonce;\\r\\n\\r\\n    constructor(address dedicatedMsgSender) {\\r\\n        _operatorAddr = dedicatedMsgSender;\\r\\n    }\\r\\n\\r\\n    function requestRandomness(bytes memory _data) external {\\r\\n        // Add your own access control mechanism here\\r\\n        lastRequestId = uint64(_requestRandomness(_data));\\r\\n        emit RandomnessRequested(lastRequestId);\\r\\n    }\\r\\n\\r\\n    function _fulfillRandomness(uint256 _randomness, uint256 _requestId, bytes memory _data) internal override {\\r\\n        // Ensure that this is the expected request being fulfilled\\r\\n        require(lastRequestId == _requestId, \\\"Request ID does not match the last request.\\\");\\r\\n\\r\\n        // Create the request record in storage\\r\\n        Request storage request = requests[uint64(_requestId)];\\r\\n        request.requestTime = block.timestamp;\\r\\n        request.requestBlock = block.number;\\r\\n        request.fulfilledTime = block.timestamp;\\r\\n        request.fulfilledBlock = block.number;\\r\\n        request.randomness = _randomness;\\r\\n\\r\\n        // Update the latest randomness and lastRequestId state variables\\r\\n        latestRandomness = bytes32(_randomness); // Keep if you need bytes32, otherwise just use _randomness\\r\\n        lastRequestId = uint64(_requestId);\\r\\n\\r\\n        // Emit an event to signal that the randomness has been fulfilled\\r\\n        emit RandomnessFulfilled(uint64(_requestId), request);\\r\\n    }\\r\\n\\r\\n    // Implement the _operator() function to return the operator's address\\r\\n    function _operator() internal view virtual override returns (address) {\\r\\n        return _operatorAddr;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x52d64e6f9e9a723a56e97553b4cd4bb4b274e7e9d3bf3c59d23c5528bf727c01\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001370380380620013708339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516112466200012a60003960006104e701526112466000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b3f6b99a1161005b578063b3f6b99a1461012d578063c4f8f27b14610149578063e6dee7ed14610179578063fc2a88c31461019557610088565b80633b5cd3a81461008d57806375ce7fff146100ab57806381d12c58146100db578063affed0e01461010f575b600080fd5b6100956101b3565b6040516100a291906107e6565b60405180910390f35b6100c560048036038101906100c0919061084b565b6101b9565b6040516100d29190610893565b60405180910390f35b6100f560048036038101906100f0919061084b565b6101ed565b6040516101069594939291906108bd565b60405180910390f35b610117610223565b6040516101249190610910565b60405180910390f35b61014760048036038101906101429190610990565b610229565b005b610163600480360381019061015e919061084b565b610430565b60405161017091906107e6565b60405180910390f35b610193600480360381019061018e9190610b31565b610448565b005b61019d6104c9565b6040516101aa9190610b9d565b60405180910390f35b60025481565b600081815481106101c957600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b60055481565b6102316104e3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029590610c15565b60405180910390fd5b600082828101906102af9190610c35565b915050600080828060200190518101906102c99190610d40565b91509150600085856040516102df929190610dcc565b6040518091039020905060006001600085815260200190815260200160002054821490506000848154811061031757610316610de5565b5b90600052602060002090602091828204019190069054906101000a900460ff16610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d90610e60565b60405180910390fd5b801561040f57873046866040516020016103939493929190610ec1565b6040516020818303038152906040528051906020012060001c97506103b988858561050b565b60008085815481106103ce576103cd610de5565b5b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555060016000858152602001908152602001600020600090555b60016000858152602001908152602001600020600090555050505050505050565b60016020528060005260406000206000915090505481565b61045181610636565b600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f21375f3d45f34ba59df13f786f613073e082f6c83c0eb2ef6eb83c89c22b8ec8600360009054906101000a900467ffffffffffffffff166040516104be9190610b9d565b60405180910390a150565b600360009054906101000a900467ffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b81600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff161461056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610f78565b60405180910390fd5b6000600460008467ffffffffffffffff16815260200190815260200160002090504281600001819055504381600101819055504281600201819055504381600301819055508381600401819055508360001b60028190555082600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508267ffffffffffffffff167f2e15cbd9321328285463961320a9cdba3de05a17e577e72e4c34cbeca629b189826040516106289190611079565b60405180910390a250505050565b60008080549050905060006001816001815401808255809150500390600052602060002090602091828204019190069054906101000a90505060016000828154811061068557610684610de5565b5b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550600081836040516020016106c39291906110e9565b604051602081830303815290604052905060006106de61076c565b9050600081836040516020016106f59291906110e9565b60405160208183030381529060405290506000818051906020012090508060016000878152602001908152602001600020819055507fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d202838560405161075b9291906110e9565b60405180910390a150505050919050565b6000806364e621274261077f9190611148565b90506000600160038361079291906111ab565b61079c91906111dc565b9050600146146107b8576001816107b391906111dc565b6107c6565b6004816107c591906111dc565b5b9250505090565b6000819050919050565b6107e0816107cd565b82525050565b60006020820190506107fb60008301846107d7565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61082881610815565b811461083357600080fd5b50565b6000813590506108458161081f565b92915050565b6000602082840312156108615761086061080b565b5b600061086f84828501610836565b91505092915050565b60008115159050919050565b61088d81610878565b82525050565b60006020820190506108a86000830184610884565b92915050565b6108b781610815565b82525050565b600060a0820190506108d260008301886108ae565b6108df60208301876108ae565b6108ec60408301866108ae565b6108f960608301856108ae565b61090660808301846108ae565b9695505050505050565b600060208201905061092560008301846108ae565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109505761094f61092b565b5b8235905067ffffffffffffffff81111561096d5761096c610930565b5b60208301915083600182028301111561098957610988610935565b5b9250929050565b6000806000604084860312156109a9576109a861080b565b5b60006109b786828701610836565b935050602084013567ffffffffffffffff8111156109d8576109d7610810565b5b6109e48682870161093a565b92509250509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a3e826109f5565b810181811067ffffffffffffffff82111715610a5d57610a5c610a06565b5b80604052505050565b6000610a70610801565b9050610a7c8282610a35565b919050565b600067ffffffffffffffff821115610a9c57610a9b610a06565b5b610aa5826109f5565b9050602081019050919050565b82818337600083830152505050565b6000610ad4610acf84610a81565b610a66565b905082815260208101848484011115610af057610aef6109f0565b5b610afb848285610ab2565b509392505050565b600082601f830112610b1857610b1761092b565b5b8135610b28848260208601610ac1565b91505092915050565b600060208284031215610b4757610b4661080b565b5b600082013567ffffffffffffffff811115610b6557610b64610810565b5b610b7184828501610b03565b91505092915050565b600067ffffffffffffffff82169050919050565b610b9781610b7a565b82525050565b6000602082019050610bb26000830184610b8e565b92915050565b600082825260208201905092915050565b7f6f6e6c79206f70657261746f7200000000000000000000000000000000000000600082015250565b6000610bff600d83610bb8565b9150610c0a82610bc9565b602082019050919050565b60006020820190508181036000830152610c2e81610bf2565b9050919050565b60008060408385031215610c4c57610c4b61080b565b5b6000610c5a85828601610836565b925050602083013567ffffffffffffffff811115610c7b57610c7a610810565b5b610c8785828601610b03565b9150509250929050565b600081519050610ca08161081f565b92915050565b60005b83811015610cc4578082015181840152602081019050610ca9565b60008484015250505050565b6000610ce3610cde84610a81565b610a66565b905082815260208101848484011115610cff57610cfe6109f0565b5b610d0a848285610ca6565b509392505050565b600082601f830112610d2757610d2661092b565b5b8151610d37848260208601610cd0565b91505092915050565b60008060408385031215610d5757610d5661080b565b5b6000610d6585828601610c91565b925050602083015167ffffffffffffffff811115610d8657610d85610810565b5b610d9285828601610d12565b9150509250929050565b600081905092915050565b6000610db38385610d9c565b9350610dc0838584610ab2565b82840190509392505050565b6000610dd9828486610da7565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f726571756573742066756c66696c6c6564206f72206d697373696e6700000000600082015250565b6000610e4a601c83610bb8565b9150610e5582610e14565b602082019050919050565b60006020820190508181036000830152610e7981610e3d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eab82610e80565b9050919050565b610ebb81610ea0565b82525050565b6000608082019050610ed660008301876108ae565b610ee36020830186610eb2565b610ef060408301856108ae565b610efd60608301846108ae565b95945050505050565b7f5265717565737420494420646f6573206e6f74206d6174636820746865206c6160008201527f737420726571756573742e000000000000000000000000000000000000000000602082015250565b6000610f62602b83610bb8565b9150610f6d82610f06565b604082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b60008160001c9050919050565b6000819050919050565b6000610fc2610fbd83610f98565b610fa5565b9050919050565b610fd281610815565b82525050565b60a082016000808301549050610fed81610faf565b610ffa6000860182610fc9565b506001830154905061100b81610faf565b6110186020860182610fc9565b506002830154905061102981610faf565b6110366040860182610fc9565b506003830154905061104781610faf565b6110546060860182610fc9565b506004830154905061106581610faf565b6110726080860182610fc9565b5050505050565b600060a08201905061108e6000830184610fd8565b92915050565b600081519050919050565b600082825260208201905092915050565b60006110bb82611094565b6110c5818561109f565b93506110d5818560208601610ca6565b6110de816109f5565b840191505092915050565b60006040820190506110fe60008301856108ae565b818103602083015261111081846110b0565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115382610815565b915061115e83610815565b925082820390508181111561117657611175611119565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111b682610815565b91506111c183610815565b9250826111d1576111d061117c565b5b828204905092915050565b60006111e782610815565b91506111f283610815565b925082820190508082111561120a57611209611119565b5b9291505056fea264697066735822122041651f5d7d01b359eed84456203fc22fc4c129bf35c0df924b536ca3bdb65b3164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063b3f6b99a1161005b578063b3f6b99a1461012d578063c4f8f27b14610149578063e6dee7ed14610179578063fc2a88c31461019557610088565b80633b5cd3a81461008d57806375ce7fff146100ab57806381d12c58146100db578063affed0e01461010f575b600080fd5b6100956101b3565b6040516100a291906107e6565b60405180910390f35b6100c560048036038101906100c0919061084b565b6101b9565b6040516100d29190610893565b60405180910390f35b6100f560048036038101906100f0919061084b565b6101ed565b6040516101069594939291906108bd565b60405180910390f35b610117610223565b6040516101249190610910565b60405180910390f35b61014760048036038101906101429190610990565b610229565b005b610163600480360381019061015e919061084b565b610430565b60405161017091906107e6565b60405180910390f35b610193600480360381019061018e9190610b31565b610448565b005b61019d6104c9565b6040516101aa9190610b9d565b60405180910390f35b60025481565b600081815481106101c957600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b60055481565b6102316104e3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029590610c15565b60405180910390fd5b600082828101906102af9190610c35565b915050600080828060200190518101906102c99190610d40565b91509150600085856040516102df929190610dcc565b6040518091039020905060006001600085815260200190815260200160002054821490506000848154811061031757610316610de5565b5b90600052602060002090602091828204019190069054906101000a900460ff16610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d90610e60565b60405180910390fd5b801561040f57873046866040516020016103939493929190610ec1565b6040516020818303038152906040528051906020012060001c97506103b988858561050b565b60008085815481106103ce576103cd610de5565b5b90600052602060002090602091828204019190066101000a81548160ff02191690831515021790555060016000858152602001908152602001600020600090555b60016000858152602001908152602001600020600090555050505050505050565b60016020528060005260406000206000915090505481565b61045181610636565b600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507f21375f3d45f34ba59df13f786f613073e082f6c83c0eb2ef6eb83c89c22b8ec8600360009054906101000a900467ffffffffffffffff166040516104be9190610b9d565b60405180910390a150565b600360009054906101000a900467ffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b81600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff161461056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610f78565b60405180910390fd5b6000600460008467ffffffffffffffff16815260200190815260200160002090504281600001819055504381600101819055504281600201819055504381600301819055508381600401819055508360001b60028190555082600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508267ffffffffffffffff167f2e15cbd9321328285463961320a9cdba3de05a17e577e72e4c34cbeca629b189826040516106289190611079565b60405180910390a250505050565b60008080549050905060006001816001815401808255809150500390600052602060002090602091828204019190069054906101000a90505060016000828154811061068557610684610de5565b5b90600052602060002090602091828204019190066101000a81548160ff021916908315150217905550600081836040516020016106c39291906110e9565b604051602081830303815290604052905060006106de61076c565b9050600081836040516020016106f59291906110e9565b60405160208183030381529060405290506000818051906020012090508060016000878152602001908152602001600020819055507fd91fc3685b930310b008ec37d2334870cab88a023ed8cc628a2e2ccd4e55d202838560405161075b9291906110e9565b60405180910390a150505050919050565b6000806364e621274261077f9190611148565b90506000600160038361079291906111ab565b61079c91906111dc565b9050600146146107b8576001816107b391906111dc565b6107c6565b6004816107c591906111dc565b5b9250505090565b6000819050919050565b6107e0816107cd565b82525050565b60006020820190506107fb60008301846107d7565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61082881610815565b811461083357600080fd5b50565b6000813590506108458161081f565b92915050565b6000602082840312156108615761086061080b565b5b600061086f84828501610836565b91505092915050565b60008115159050919050565b61088d81610878565b82525050565b60006020820190506108a86000830184610884565b92915050565b6108b781610815565b82525050565b600060a0820190506108d260008301886108ae565b6108df60208301876108ae565b6108ec60408301866108ae565b6108f960608301856108ae565b61090660808301846108ae565b9695505050505050565b600060208201905061092560008301846108ae565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126109505761094f61092b565b5b8235905067ffffffffffffffff81111561096d5761096c610930565b5b60208301915083600182028301111561098957610988610935565b5b9250929050565b6000806000604084860312156109a9576109a861080b565b5b60006109b786828701610836565b935050602084013567ffffffffffffffff8111156109d8576109d7610810565b5b6109e48682870161093a565b92509250509250925092565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a3e826109f5565b810181811067ffffffffffffffff82111715610a5d57610a5c610a06565b5b80604052505050565b6000610a70610801565b9050610a7c8282610a35565b919050565b600067ffffffffffffffff821115610a9c57610a9b610a06565b5b610aa5826109f5565b9050602081019050919050565b82818337600083830152505050565b6000610ad4610acf84610a81565b610a66565b905082815260208101848484011115610af057610aef6109f0565b5b610afb848285610ab2565b509392505050565b600082601f830112610b1857610b1761092b565b5b8135610b28848260208601610ac1565b91505092915050565b600060208284031215610b4757610b4661080b565b5b600082013567ffffffffffffffff811115610b6557610b64610810565b5b610b7184828501610b03565b91505092915050565b600067ffffffffffffffff82169050919050565b610b9781610b7a565b82525050565b6000602082019050610bb26000830184610b8e565b92915050565b600082825260208201905092915050565b7f6f6e6c79206f70657261746f7200000000000000000000000000000000000000600082015250565b6000610bff600d83610bb8565b9150610c0a82610bc9565b602082019050919050565b60006020820190508181036000830152610c2e81610bf2565b9050919050565b60008060408385031215610c4c57610c4b61080b565b5b6000610c5a85828601610836565b925050602083013567ffffffffffffffff811115610c7b57610c7a610810565b5b610c8785828601610b03565b9150509250929050565b600081519050610ca08161081f565b92915050565b60005b83811015610cc4578082015181840152602081019050610ca9565b60008484015250505050565b6000610ce3610cde84610a81565b610a66565b905082815260208101848484011115610cff57610cfe6109f0565b5b610d0a848285610ca6565b509392505050565b600082601f830112610d2757610d2661092b565b5b8151610d37848260208601610cd0565b91505092915050565b60008060408385031215610d5757610d5661080b565b5b6000610d6585828601610c91565b925050602083015167ffffffffffffffff811115610d8657610d85610810565b5b610d9285828601610d12565b9150509250929050565b600081905092915050565b6000610db38385610d9c565b9350610dc0838584610ab2565b82840190509392505050565b6000610dd9828486610da7565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f726571756573742066756c66696c6c6564206f72206d697373696e6700000000600082015250565b6000610e4a601c83610bb8565b9150610e5582610e14565b602082019050919050565b60006020820190508181036000830152610e7981610e3d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eab82610e80565b9050919050565b610ebb81610ea0565b82525050565b6000608082019050610ed660008301876108ae565b610ee36020830186610eb2565b610ef060408301856108ae565b610efd60608301846108ae565b95945050505050565b7f5265717565737420494420646f6573206e6f74206d6174636820746865206c6160008201527f737420726571756573742e000000000000000000000000000000000000000000602082015250565b6000610f62602b83610bb8565b9150610f6d82610f06565b604082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b60008160001c9050919050565b6000819050919050565b6000610fc2610fbd83610f98565b610fa5565b9050919050565b610fd281610815565b82525050565b60a082016000808301549050610fed81610faf565b610ffa6000860182610fc9565b506001830154905061100b81610faf565b6110186020860182610fc9565b506002830154905061102981610faf565b6110366040860182610fc9565b506003830154905061104781610faf565b6110546060860182610fc9565b506004830154905061106581610faf565b6110726080860182610fc9565b5050505050565b600060a08201905061108e6000830184610fd8565b92915050565b600081519050919050565b600082825260208201905092915050565b60006110bb82611094565b6110c5818561109f565b93506110d5818560208601610ca6565b6110de816109f5565b840191505092915050565b60006040820190506110fe60008301856108ae565b818103602083015261111081846110b0565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115382610815565b915061115e83610815565b925082820390508181111561117657611175611119565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111b682610815565b91506111c183610815565b9250826111d1576111d061117c565b5b828204905092915050565b60006111e782610815565b91506111f283610815565b925082820190508082111561120a57611209611119565b5b9291505056fea264697066735822122041651f5d7d01b359eed84456203fc22fc4c129bf35c0df924b536ca3bdb65b3164736f6c63430008130033",
  "devdoc": {
    "events": {
      "RequestedRandomness(uint256,bytes)": {
        "params": {
          "data": "Additional data associated with the request."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "fulfillRandomness(uint256,bytes)": {
        "params": {
          "dataWithRound": "Additional data provided by Gelato VRF containing request details.",
          "randomness": "The random number generated by Gelato VRF."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "RequestedRandomness(uint256,bytes)": {
        "notice": "Event emitted when a randomness request is made."
      }
    },
    "kind": "user",
    "methods": {
      "fulfillRandomness(uint256,bytes)": {
        "notice": "Callback function used by Gelato VRF to return the random number. The randomness is derived by hashing the provided randomness with the request ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 501,
        "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
        "label": "requestPending",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bool)dyn_storage"
      },
      {
        "astId": 505,
        "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
        "label": "requestedHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 763,
        "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
        "label": "latestRandomness",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 765,
        "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 792,
        "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
        "label": "requests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Request)776_storage)"
      },
      {
        "astId": 794,
        "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
        "label": "nonce",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_array(t_bool)dyn_storage": {
        "base": "t_bool",
        "encoding": "dynamic_array",
        "label": "bool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Request)776_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SimpleVRFContract.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)776_storage"
      },
      "t_struct(Request)776_storage": {
        "encoding": "inplace",
        "label": "struct SimpleVRFContract.Request",
        "members": [
          {
            "astId": 767,
            "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
            "label": "requestTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 769,
            "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
            "label": "requestBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 771,
            "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
            "label": "fulfilledTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 773,
            "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
            "label": "fulfilledBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 775,
            "contract": "contracts/gelato-vrf/SimpleVRFContract.sol:SimpleVRFContract",
            "label": "randomness",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}