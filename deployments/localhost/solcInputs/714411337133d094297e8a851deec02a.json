{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/gelato-vrf-cl-compatible/SimpleCLVRFContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\n//the line below disables the solc linter for the whole file\r\n/* solhint-disable */\r\n\r\nimport \"./VRFConsumerBaseV2.sol\";\r\nimport \"./VRFCoordinatorV2Interface.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract MockVRFConsumerNew is VRFConsumerBaseV2, Ownable {\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n\r\n    // Your subscription ID.\r\n    uint64 s_subscriptionId = 1002;\r\n\r\n    // Sepolia coordinator. For other networks,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    address localVrfCoordinator = 0xAE975071Be8F8eE67addBC1A82488F1C24858067;\r\n\r\n    // The gas lane to use, which specifies the maximum gas price to bump to.\r\n    // For a list of available gas lanes on each network,\r\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n    bytes32 s_keyHash =\r\n        0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd;\r\n\r\n    // Depends on the number of requested values that you want sent to the\r\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n    // so 40,000 is a safe default for this example contract. Test and adjust\r\n    // this limit based on the network that you select, the size of the request,\r\n    // and the processing of the callback request in the fulfillRandomWords()\r\n    // function.\r\n    uint32 callbackGasLimit = 300000;\r\n\r\n    // The default is 3, but you can set this higher.\r\n    uint16 requestConfirmations = 3;\r\n\r\n    // For this example, retrieve 1 random value in one request.\r\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\r\n    uint32 numWords = 1;\r\n\r\n    uint256 public requestId;\r\n    struct Request {\r\n        uint256 requestTime;\r\n        uint256 requestBlock;\r\n        uint256 fulfilledTime;\r\n        uint256 fulfilledBlock;\r\n        uint256 randomness;\r\n    }\r\n\r\n    event RandomnessFulfilled(uint256 indexed nonce, Request);\r\n\r\n    uint256 public nonce;\r\n    mapping(uint256 => Request) public requests;\r\n\r\n    constructor() VRFConsumerBaseV2(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n    }\r\n\r\n    function requestRandomness(uint256 _count) external {\r\n        for (uint256 i; i < _count; i++) {\r\n            _requestRandomness();\r\n        }\r\n    }\r\n\r\n    function _requestRandomness() private {\r\n        requestId = COORDINATOR.requestRandomWords(\r\n            s_keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n        nonce += 1;\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) internal override {\r\n        uint256 d20Value = (randomWords[0] % 20) + 1;\r\n        Request memory request = Request(\r\n            block.timestamp,\r\n            block.number,\r\n            block.timestamp,\r\n            block.number,\r\n            randomWords[0]\r\n        );\r\n\r\n        requests[block.number] = request;\r\n\r\n        emit RandomnessFulfilled(block.number, request);\r\n    }\r\n\r\n    function setCoordinator(address _vrfCoordinator) external onlyOwner {\r\n        setVRFCoordinator(_vrfCoordinator);\r\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\r\n    }\r\n}\r\n"
    },
    "contracts/gelato-vrf-cl-compatible/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n/* solhint-disable */\r\npragma solidity ^0.8.4;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBaseV2 {\r\n  error OnlyCoordinatorCanFulfill(address have, address want);\r\n  address public vrfCoordinator;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   */\r\n  constructor(address _vrfCoordinator) {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  function setVRFCoordinator(address _vrfCoordinator) internal {\r\n    vrfCoordinator = _vrfCoordinator;\r\n  }\r\n\r\n  function getVRFCoordinator() internal view returns (address) {\r\n    return vrfCoordinator;\r\n  }\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomWords the VRF output expanded to the requested number of words\r\n   */\r\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n    if (msg.sender != vrfCoordinator) {\r\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n    }\r\n    fulfillRandomWords(requestId, randomWords);\r\n  }\r\n}\r\n"
    },
    "contracts/gelato-vrf-cl-compatible/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n/* solhint-disable */\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param numWords - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 numWords\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(\r\n    uint64 subId\r\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/gelato-vrf/GelatoVRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IGelatoVRFConsumer} from \"./IGelatoVRFConsumer.sol\";\r\n\r\n/// @title GelatoVRFConsumerBase\r\n/// @dev This contract can be inherit by upgradeable smart contracts as well.\r\n/// @dev This contract handles domain separation between consecutive randomness requests\r\n/// The contract has to be implemented by contracts willing to use the gelato VRF system.\r\n/// This base contract enhances the GelatoVRFConsumer by introducing request IDs and\r\n/// ensuring unique random values.\r\n/// for different request IDs by hashing them with the random number provided by drand.\r\n/// For security considerations, refer to the Gelato documentation.\r\nabstract contract GelatoVRFConsumerBase is IGelatoVRFConsumer {\r\n    uint256 private constant _PERIOD = 3;\r\n    uint256 private constant _GENESIS = 1692803367;\r\n    bool[] public requestPending;\r\n    mapping(uint256 => bytes32) public requestedHash;\r\n\r\n    /// @notice Returns the address of the dedicated msg.sender.\r\n    /// @dev The operator can be found on the Gelato dashboard after a VRF is deployed.\r\n    /// @return Address of the operator.\r\n    function _operator() internal view virtual returns (address);\r\n\r\n    /// @notice User logic to handle the random value received.\r\n    /// @param randomness The random number generated by Gelato VRF.\r\n    /// @param requestId The ID for the randomness request.\r\n    /// @param extraData Additional data from the randomness request.\r\n    function _fulfillRandomness(\r\n        uint256 randomness,\r\n        uint256 requestId,\r\n        bytes memory extraData\r\n    ) internal virtual;\r\n\r\n    /// @notice Requests randomness from the Gelato VRF.\r\n    /// @dev The extraData parameter allows for additional data to be passed to\r\n    /// the VRF, which is then forwarded to the callback. This is useful for\r\n    /// request tracking purposes if requestId is not enough.\r\n    /// @param extraData Additional data for the randomness request.\r\n    /// @return requestId The ID for the randomness request.\r\n    function _requestRandomness(\r\n        bytes memory extraData\r\n    ) internal returns (uint256 requestId) {\r\n        requestId = uint256(requestPending.length);\r\n        requestPending.push();\r\n        requestPending[requestId] = true;\r\n\r\n        bytes memory data = abi.encode(requestId, extraData);\r\n        uint256 round = _round();\r\n\r\n        bytes memory dataWithRound = abi.encode(round, data);\r\n        bytes32 requestHash = keccak256(dataWithRound);\r\n\r\n        requestedHash[requestId] = requestHash;\r\n\r\n        emit RequestedRandomness(round, data);\r\n    }\r\n\r\n    /// @notice Callback function used by Gelato VRF to return the random number.\r\n    /// The randomness is derived by hashing the provided randomness with the request ID.\r\n    /// @param randomness The random number generated by Gelato VRF.\r\n    /// @param dataWithRound Additional data provided by Gelato VRF containing request details.\r\n    function fulfillRandomness(\r\n        uint256 randomness,\r\n        bytes calldata dataWithRound\r\n    ) external {\r\n        require(msg.sender == _operator(), \"only operator\");\r\n\r\n        (, bytes memory data) = abi.decode(dataWithRound, (uint256, bytes));\r\n        (uint256 requestId, bytes memory extraData) = abi.decode(\r\n            data,\r\n            (uint256, bytes)\r\n        );\r\n\r\n        bytes32 requestHash = keccak256(dataWithRound);\r\n        bool isValidRequestHash = requestHash == requestedHash[requestId];\r\n\r\n        require(requestPending[requestId], \"request fulfilled or missing\");\r\n\r\n        if (isValidRequestHash) {\r\n            randomness = uint(\r\n                keccak256(\r\n                    abi.encode(\r\n                        randomness,\r\n                        address(this),\r\n                        block.chainid,\r\n                        requestId\r\n                    )\r\n                )\r\n            );\r\n\r\n            _fulfillRandomness(randomness, requestId, extraData);\r\n            requestPending[requestId] = false;\r\n\r\n            delete requestedHash[requestId];\r\n        }\r\n\r\n        delete requestedHash[requestId];\r\n    }\r\n\r\n    /// @notice Computes and returns the round number of drand to request randomness from.\r\n    function _round() private view returns (uint256 round) {\r\n        // solhint-disable-next-line not-rely-on-time\r\n        uint256 elapsedFromGenesis = block.timestamp - _GENESIS;\r\n        uint256 currentRound = (elapsedFromGenesis / _PERIOD) + 1;\r\n\r\n        round = block.chainid == 1 ? currentRound + 4 : currentRound + 1;\r\n    }\r\n}"
    },
    "contracts/gelato-vrf/IGelatoVRFConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title IGelatoVRFConsumer\r\n/// @dev Interface for consuming random number provided by Drand.\r\n/// @notice This interface allows contracts to receive a random number provided by Gelato VRF.\r\ninterface IGelatoVRFConsumer {\r\n    /// @notice Event emitted when a randomness request is made.\r\n    /// @param data The round of randomness to request.\r\n    /// @param data Additional data associated with the request.\r\n    event RequestedRandomness(uint256 round, bytes data);\r\n\r\n    /// @notice Callback function used by Gelato to return the random number.\r\n    /// @dev The random number is fetched from one among many drand endpoints\r\n    /// and passed back to this function like in a Gelato Web3 Function.\r\n    /// @param randomness The random number generated by drand.\r\n    /// @param data Additional data provided by Gelato VRF or the user, typically unused.\r\n    function fulfillRandomness(\r\n        uint256 randomness,\r\n        bytes calldata data\r\n    ) external;\r\n}"
    },
    "contracts/gelato-vrf/SimpleVRFContract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport {GelatoVRFConsumerBase} from \"./GelatoVRFConsumerBase.sol\";\r\n\r\ncontract SimpleVRFContract is GelatoVRFConsumerBase {\r\n    address private immutable _operatorAddr; //\r\n    bytes32 public latestRandomness;\r\n    uint64 public lastRequestId;\r\n\r\n    struct Request {\r\n        uint256 requestTime;\r\n        uint256 requestBlock;\r\n        uint256 fulfilledTime;\r\n        uint256 fulfilledBlock;\r\n        uint256 randomness;\r\n    }\r\n\r\n    event RandomnessRequested(uint64 requestId);\r\n    event RandomnessFulfilled(uint256 indexed nonce, Request);\r\n\r\n    mapping(uint256 => Request) public requests;\r\n    uint256 public nonce;\r\n\r\n    constructor(address dedicatedMsgSender) {\r\n        _operatorAddr = dedicatedMsgSender;\r\n    }\r\n\r\n    function requestRandomness(bytes memory _data) external {\r\n        // Add your own access control mechanism here\r\n        lastRequestId = uint64(_requestRandomness(_data));\r\n        emit RandomnessRequested(lastRequestId);\r\n    }\r\n\r\n    function _fulfillRandomness(uint256 _randomness, uint256 _requestId, bytes memory _data) internal override {\r\n        // Ensure that this is the expected request being fulfilled\r\n        require(lastRequestId == _requestId, \"Request ID does not match the last request.\");\r\n\r\n        // Create the request record in storage\r\n        Request storage request = requests[uint64(_requestId)];\r\n        request.requestTime = block.timestamp;\r\n        request.requestBlock = block.number;\r\n        request.fulfilledTime = block.timestamp;\r\n        request.fulfilledBlock = block.number;\r\n        request.randomness = _randomness;\r\n\r\n        // Update the latest randomness and lastRequestId state variables\r\n        latestRandomness = bytes32(_randomness); // Keep if you need bytes32, otherwise just use _randomness\r\n        lastRequestId = uint64(_requestId);\r\n\r\n        // Emit an event to signal that the randomness has been fulfilled\r\n        emit RandomnessFulfilled(uint64(_requestId), request);\r\n    }\r\n\r\n    // Implement the _operator() function to return the operator's address\r\n    function _operator() internal view virtual override returns (address) {\r\n        return _operatorAddr;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}